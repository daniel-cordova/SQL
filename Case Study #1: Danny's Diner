Case Study #1: Danny's Diner


 --------------------
   Case Study Questions
 --------------------

-- 1. What is the total amount each customer spent at the restaurant?

SELECT
	s.customer_id
  ,SUM(m.price) as amount_spent
FROM dannys_diner.menu m JOIN dannys_diner.sales s ON s.product_id=m.product_id
GROUP BY s.customer_id
ORDER BY s.customer_id
;

-- 2. How many days has each customer visited the restaurant?

SELECT
	customer_id
  ,COUNT(DISTINCT(order_date)) as Day_Count
FROM dannys_diner.sales
GROUP BY customer_id
ORDER BY customer_id
;

-- 3. What was the first item from the menu purchased by each customer?


WITH ordered_sales AS
(
SELECT
	s.customer_id
    ,s.order_date
    ,m.product_name
    ,DENSE_RANK() OVER( 
      PARTITION BY s.customer_id ORDER BY s.order_date
      ) as rank_order
FROM dannys_diner.sales s
JOIN dannys_diner.menu m
ON s.product_id = m.product_id
 )
 SELECT
 	customer_id
  ,product_name
FROM ordered_sales
WHERE rank_order = 1
GROUP BY customer_id
  			,product_name
;

-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?

SELECT
  product_name
  ,COUNT(s.product_id) AS purchase_volume
FROM dannys_diner.sales AS s
JOIN dannys_diner.menu AS m
ON s.product_id = m.product_id
GROUP BY s.product_id, product_name
ORDER BY purchase_volume DESC
LIMIT 1
;

-- 5. Which item was the most popular for each customer?

WITH top_order_cte AS
(
  SELECT
	s.customer_id
    ,COUNT(s.product_id) AS purchase_volume
    ,m.product_name
    ,DENSE_RANK() OVER (
      PARTITION BY s.customer_ID ORDER BY COUNT(s.product_id) DESC
      ) AS rank
FROM dannys_diner.sales AS s
JOIN dannys_diner.menu AS m
ON s.product_id = m.product_id
GROUP BY s.customer_id, m.product_name
ORDER BY s.customer_id, purchase_volume DESC
  )
SELECT
	customer_id
    ,product_name
    ,purchase_volume
FROM top_order_cte
WHERE rank = 1
;

-- 6. Which item was purchased first by the customer after they became a member?

WITH member_purchases_cte AS
(
	SELECT s.customer_id
		,m.join_date
		,s.order_date
		,s.product_id
		,DENSE_RANK() OVER (
			PARTITION BY s.customer_id ORDER BY s.order_date
			) AS rank
	FROM dannys_diner.sales AS s
	JOIN dannys_diner.members AS m ON s.customer_id = m.customer_id
	WHERE s.order_date >= m.join_date
	)
SELECT mp.customer_id
	,mp.order_date
	,m2.product_name
FROM member_purchases_cte AS mp
JOIN dannys_diner.menu AS m2 ON mp.product_id = m2.product_id
WHERE rank = 1
;

-- 7. Which item was purchased just before the customer became a member?

WITH pre_member_purchases_cte AS
 (
	SELECT s.customer_id
		,m.join_date
		,s.order_date
		,s.product_id
		,DENSE_RANK() OVER (
			PARTITION BY s.customer_id ORDER BY s.order_date DESC
			) AS rank
	FROM dannys_diner.sales AS s
	JOIN dannys_diner.members AS m ON s.customer_id = m.customer_id
	WHERE s.order_date < m.join_date
	)
SELECT pmp.customer_id
	,pmp.order_date
	,m2.product_name
FROM pre_member_purchases_cte AS pmp
JOIN dannys_diner.menu AS m2 ON pmp.product_id = m2.product_id
WHERE rank = 1
;

-- 8. What is the total items and amount spent for each member before they became a member?

SELECT s.customer_id
	,COUNT(DISTINCT s.product_id) AS distinct_item
	,SUM(m2.price) AS total_cost
FROM dannys_diner.sales AS s
JOIN dannys_diner.members AS m ON s.customer_id = m.customer_id
JOIN dannys_diner.menu AS m2 ON s.product_id = m2.product_id
WHERE s.order_date < m.join_date
GROUP BY s.customer_id;
;

-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

WITH points_cte
AS (
	SELECT *
		,CASE 
			WHEN product_name = 'sushi'
				THEN price * 20
			ELSE price * 10
			END AS points
	FROM dannys_diner.menu
	)
SELECT s.customer_id
	,SUM(p.points) AS total_points
FROM points_cte AS p
JOIN dannys_diner.sales AS s ON p.product_id = s.product_id
GROUP BY s.customer_id
;

-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

WITH dates AS 
(
	SELECT *
		,DATE_ADD(join_date, INTERVAL 6 DAY) AS first_week
		,LAST_DAY('2021-01-31') AS last_date
	FROM dannys_diner.members AS mb
	)
SELECT d.customer_id
	,d.join_date
	,d.first_week
	,d.last_date
	,s.order_date
	,m.product_name
	,m.price
	,SUM(CASE 
			WHEN m.product_name = 'sushi'
				THEN m.price * 2 * 10
			WHEN s.order_date BETWEEN d.join_date
					AND d.first_week
				THEN m.price * 2 * 10
			ELSE m.price * 10
			END) AS points
FROM dates AS d
JOIN dannys_diner.sales AS s ON s.customer_id = d.customer_id
JOIN dannys_diner.menu AS m ON m.product_id = s.product_id
WHERE s.order_date < d.first_week
GROUP BY d.customer_id;


-- Bonus 1: Join all the things

SELECT s.customer_id
	,s.order_date
	,m.product_name
	,m.price
	,CASE 
		WHEN mb.join_date > s.order_date
			THEN 'N'
		WHEN mb.join_date <= s.order_date
			THEN 'Y'
		ELSE 'N'
		END AS is_member
FROM dannys_diner.sales AS s
LEFT JOIN dannys_diner.menu m ON s.product_id = m.product_id
LEFT JOIN dannys_diner.members mb ON mb.customer_id = s.customer_id
ORDER BY s.customer_id
;

-- Bonus 2: Rank all the things

WITH joined_table
AS (
	SELECT s.customer_id
		,s.order_date
		,m.product_name
		,m.price
		,CASE 
			WHEN mb.join_date > s.order_date
				THEN 'N'
			WHEN mb.join_date <= s.order_date
				THEN 'Y'
			ELSE 'N'
			END AS member_status
	FROM dannys_diner.sales s
	LEFT JOIN dannys_diner.menu m ON s.product_id = m.product_id
	LEFT JOIN dannys_diner.members mb ON mb.customer_id = s.customer_id
	ORDER BY s.customer_id
	)
SELECT *
	,CASE 
		WHEN member_status = 'N'
			THEN NULL
		ELSE RANK() OVER (
				PARTITION BY customer_id
				,member_status ORDER BY order_date
				)
		END AS ranks
FROM joined_table;
